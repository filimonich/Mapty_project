'use strict';

class Workout {
  date = new Date();
  id = (Date.now() + ``).slice(-10);
  clicks = 0;

  constructor(coords, distance, duration) {
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }

  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }
}

// –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ extends –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞.
class Running extends Workout {
  type = `running`;

  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence; // cadence - —à–∞–≥ –≤ –º–∏–Ω—É—Ç—É
    this.calcPace();
    this._setDescription();
  }
  calcPace() {
    // min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  type = `cycling`;

  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed();
    this._setDescription();
  }
  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycling1 = new Cycling([39, -12], 27, 95, 523);
// console.log(run1, cycling1);

////////////////////////////////////////////////////////////
// –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

class App {
  // –ß–∞—Å—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  #map;
  #mapZoomLevel = 14;
  #mapEvent;
  #workouts = [];

  constructor() {
    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this._getPosition(); // –ö–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ.

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    this._getLocalStorage();

    // –ü—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    // –ú–µ—Ç–æ–¥ HTMLFormElement.submit() –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É <form>.
    form.addEventListener(`submit`, this._newWorkout.bind(this));
    // –°–æ–±—ã—Ç–∏–µ change–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ <input>, <select>–∏ , <textarea>–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç input—Å–æ–±—ã—Ç–∏—è, change—Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ value.
    inputType.addEventListener(`change`, this._toggleElevationField);
    containerWorkouts.addEventListener(`click`, this._moveToPopup.bind(this));
  }

  _getPosition() {
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert(`Could not get your position`);
        }
      );
  }

  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(`https://www.google.ru/maps/@${latitude},${longitude}`);

    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, this.#mapZoomLevel); // –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º, –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
    this.#map.on(`click`, this._showForm.bind(this));

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞—Ä–∫–µ—Ä–∞
    this.#workouts.forEach(work => {
      this._renderWorkoutMarker(work);
    });
  }

  _showForm(mapE) {
    this.#mapEvent = mapE; // –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–∞ mapE
    form.classList.remove(`hidden`); // —É–±—Ä–∞—Ç—å –∫–ª–∞—Å // –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º–∞, —Å–ª–µ–≤–∞
    inputDistance.focus(); // –¥–æ–±–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å–æ–≤ –≤ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ inputDistance
  }

  // –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã, –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏—è –≤—Ö–æ–¥
  _hideForm() {
    // Empty inputs
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        ``;
    form.style.distance = `none`;
    form.classList.add(`hidden`);
    //  –≤—ã–∑—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => (form.style.display = `grid`), 1000);
  }

  _toggleElevationField() {
    // –ú–µ—Ç–æ–¥ Element.closest() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–∏–ª–∏ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç), –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É –∏–ª–∏ null, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç.
    // –ø–µ—Ä–µ–∫–ª—é—á–∞—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å –Ω–∞ –¥–≤—É—Ö –ø–æ–ª—è—Ö, —É–±–µ–∂–¥–µ–º—Å—è —á—Ç–æ –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã—Ç –æ–¥–∏–Ω, –∞ –¥—Ä—É–≥–æ–π –≤–∏–¥–∏–º—ã–π.
    inputElevation.closest(`.form__row`).classList.toggle(`form__row--hidden`);
    inputCadence.closest(`.form__row`).classList.toggle(`form__row--hidden`);
  }

  _newWorkout(e) {
    // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    // –¶–∏–∫–ª –ø–æ –º–∞—Å—Å–∏–≤—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ (Number.isFinite(inp)) –∫–æ–Ω–µ—á–Ω—ã–º –∏–ª–∏ –Ω–µ—Ç,
    // –º–µ—Ç–æ–¥ every –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–π(true), –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ –∏—Å—Ç–∏–Ω–Ω–æ –¥–ª—è –≤—Å–µ—Ö –Ω–∏—Ö,
    // –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–æ —á–∏—Å–ª–æ –±—ã–ª–æ –Ω–µ –∫–æ–Ω–µ—á–Ω—ã–º, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ª–æ–∂–Ω—ã–º(false)
    const validInputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp));
    const allPositive = (...inputs) => inputs.every(inp => inp > 0);

    e.preventDefault();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    const type = inputType.value;
    const distance = +inputDistance.value; // –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ +
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;

    // –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    if (type === `running`) {
      const cadence = +inputCadence.value;
      // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(cadence)
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence) // –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
      )
        // –µ—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö —Ç—Ä—ë—Ö —á–∏—Å–µ–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —Ç–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        return alert(`–≤—Ö–æ–¥-—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º`);

      workout = new Running([lat, lng], distance, duration, cadence);
    }

    // –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ, —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç cycling
    if (type === `cycling`) {
      const elevation = +inputElevation.value;
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      )
        return alert(`–≤—Ö–æ–¥-—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º`);

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }
    // –ò –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    this.#workouts.push(workout);

    // –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ –≤ –≤–∏–¥–µ –º–∞—Ä–∫–µ—Ä–æ–≤
    this._renderWorkoutMarker(workout);

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ
    this._renderWorkout(workout);

    // –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É + –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ—Ç–∫–∏
    this._hideForm();

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    this._setLocalStorage();
  }
  _renderWorkoutMarker(workout) {
    // Display marker
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === `running` ? `üèÉ‚Äç‚ôÇÔ∏è` : `üö¥‚Äç‚ôÄÔ∏è`} ${workout.description}`
      )
      .openPopup();
  }
  _renderWorkout(workout) {
    let html = `
        <li class="workout workout--${workout.type}" data-id="${workout.id}">
          <h2 class="workout__title">${workout.description}</h2>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.type === `running` ? `üèÉ‚Äç‚ôÇÔ∏è` : `üö¥‚Äç‚ôÄÔ∏è`
            }</span>
            <span class="workout__value">${workout.distance}</span>
            <span class="workout__unit">km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">${workout.duration}</span>
            <span class="workout__unit">min</span>
          </div>`;
    if (workout.type === `running`)
      html += `
          <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">min/km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">spm</span>
          </div>
        </li>`;
    if (workout.type === `cycling`)
      html += `
          <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.speed.toFixed(1)}</span>
            <span class="workout__unit">km/h</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevationGain}</span>
            <span class="workout__unit">m</span>
          </div>
        </li>
      `;

    form.insertAdjacentHTML(`afterend`, html);
  }
  _moveToPopup(e) {
    // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:
    // if (!this.#map) return;
    const workoutEl = e.target.closest(`.workout`);

    if (!workoutEl) return;

    const workout = this.#workouts.find(
      work => work.id === workoutEl.dataset.id
    );

    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });

    // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    // –û–±—ä–µ–∫—Ç—ã –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –Ω–µ –Ω–∞—Å–ª–µ–¥—É—é—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã
    // workout.click();
  }

  _setLocalStorage() {
    // –ï—Å–ª–∏ –º–µ—Ç–æ–¥—É setItem() –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Storage –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á—É –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–∏–±–æ, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ.
    // –ú–µ—Ç–æ–¥ JSON.stringify() –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ JavaScript –≤ —Å—Ç—Ä–æ–∫—É JSON, –≤–æ–∑–º–æ–∂–Ω–æ —Å –∑–∞–º–µ–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã, –∏–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –º–∞—Å—Å–∏–≤ –∑–∞–º–µ–Ω—ã.
    localStorage.setItem(`workouts`, JSON.stringify(this.#workouts));
  }

  _getLocalStorage() {
    // –ú–µ—Ç–æ–¥ JSON.parse() —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É JSON, –≤–æ–∑–º–æ–∂–Ω–æ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è.
    // –ï—Å–ª–∏ –≤ –º–µ—Ç–æ–¥ getItem() –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Storage –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª—é—á –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Ç–æ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–µ–∂–∞—â–µ–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É.
    const data = JSON.parse(localStorage.getItem(`workouts`));

    if (!data) return;

    this.#workouts = data;

    this.#workouts.forEach(work => {
      this._renderWorkout(work);
    });
  }

  reset() {
    localStorage.removeItem(`workouts`);
    location.reload();
  }
}

const app = new App();
